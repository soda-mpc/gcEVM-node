// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.4
// source: soda-mpc/rpc/mpcService.proto

package vm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MPCService_RunMPC_FullMethodName        = "/mpcService.MPCService/RunMPC"
	MPCService_InitMPCStatus_FullMethodName = "/mpcService.MPCService/InitMPCStatus"
	MPCService_GetMPCStatus_FullMethodName  = "/mpcService.MPCService/GetMPCStatus"
	MPCService_SetMPCStatus_FullMethodName  = "/mpcService.MPCService/SetMPCStatus"
	MPCService_IsConnected_FullMethodName   = "/mpcService.MPCService/IsConnected"
)

// MPCServiceClient is the client API for MPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MPCServiceClient interface {
	RunMPC(ctx context.Context, in *MPCRequest, opts ...grpc.CallOption) (*MPCResponse, error)
	InitMPCStatus(ctx context.Context, in *InitMPCStatusRequest, opts ...grpc.CallOption) (*InitMPCStatusResponse, error)
	GetMPCStatus(ctx context.Context, in *GetMPCStatusRequest, opts ...grpc.CallOption) (*GetMPCStatusResponse, error)
	SetMPCStatus(ctx context.Context, in *SetMPCStatusRequest, opts ...grpc.CallOption) (*SetMPCStatusResponse, error)
	IsConnected(ctx context.Context, in *IsConnectedRequest, opts ...grpc.CallOption) (*IsConnectedResponse, error)
}

type mPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMPCServiceClient(cc grpc.ClientConnInterface) MPCServiceClient {
	return &mPCServiceClient{cc}
}

func (c *mPCServiceClient) RunMPC(ctx context.Context, in *MPCRequest, opts ...grpc.CallOption) (*MPCResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MPCResponse)
	err := c.cc.Invoke(ctx, MPCService_RunMPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCServiceClient) InitMPCStatus(ctx context.Context, in *InitMPCStatusRequest, opts ...grpc.CallOption) (*InitMPCStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitMPCStatusResponse)
	err := c.cc.Invoke(ctx, MPCService_InitMPCStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCServiceClient) GetMPCStatus(ctx context.Context, in *GetMPCStatusRequest, opts ...grpc.CallOption) (*GetMPCStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMPCStatusResponse)
	err := c.cc.Invoke(ctx, MPCService_GetMPCStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCServiceClient) SetMPCStatus(ctx context.Context, in *SetMPCStatusRequest, opts ...grpc.CallOption) (*SetMPCStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMPCStatusResponse)
	err := c.cc.Invoke(ctx, MPCService_SetMPCStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mPCServiceClient) IsConnected(ctx context.Context, in *IsConnectedRequest, opts ...grpc.CallOption) (*IsConnectedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsConnectedResponse)
	err := c.cc.Invoke(ctx, MPCService_IsConnected_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MPCServiceServer is the server API for MPCService service.
// All implementations must embed UnimplementedMPCServiceServer
// for forward compatibility.
type MPCServiceServer interface {
	RunMPC(context.Context, *MPCRequest) (*MPCResponse, error)
	InitMPCStatus(context.Context, *InitMPCStatusRequest) (*InitMPCStatusResponse, error)
	GetMPCStatus(context.Context, *GetMPCStatusRequest) (*GetMPCStatusResponse, error)
	SetMPCStatus(context.Context, *SetMPCStatusRequest) (*SetMPCStatusResponse, error)
	IsConnected(context.Context, *IsConnectedRequest) (*IsConnectedResponse, error)
	mustEmbedUnimplementedMPCServiceServer()
}

// UnimplementedMPCServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMPCServiceServer struct{}

func (UnimplementedMPCServiceServer) RunMPC(context.Context, *MPCRequest) (*MPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunMPC not implemented")
}
func (UnimplementedMPCServiceServer) InitMPCStatus(context.Context, *InitMPCStatusRequest) (*InitMPCStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitMPCStatus not implemented")
}
func (UnimplementedMPCServiceServer) GetMPCStatus(context.Context, *GetMPCStatusRequest) (*GetMPCStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMPCStatus not implemented")
}
func (UnimplementedMPCServiceServer) SetMPCStatus(context.Context, *SetMPCStatusRequest) (*SetMPCStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMPCStatus not implemented")
}
func (UnimplementedMPCServiceServer) IsConnected(context.Context, *IsConnectedRequest) (*IsConnectedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsConnected not implemented")
}
func (UnimplementedMPCServiceServer) mustEmbedUnimplementedMPCServiceServer() {}
func (UnimplementedMPCServiceServer) testEmbeddedByValue()                    {}

// UnsafeMPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MPCServiceServer will
// result in compilation errors.
type UnsafeMPCServiceServer interface {
	mustEmbedUnimplementedMPCServiceServer()
}

func RegisterMPCServiceServer(s grpc.ServiceRegistrar, srv MPCServiceServer) {
	// If the following call pancis, it indicates UnimplementedMPCServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MPCService_ServiceDesc, srv)
}

func _MPCService_RunMPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCServiceServer).RunMPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPCService_RunMPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCServiceServer).RunMPC(ctx, req.(*MPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCService_InitMPCStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitMPCStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCServiceServer).InitMPCStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPCService_InitMPCStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCServiceServer).InitMPCStatus(ctx, req.(*InitMPCStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCService_GetMPCStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMPCStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCServiceServer).GetMPCStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPCService_GetMPCStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCServiceServer).GetMPCStatus(ctx, req.(*GetMPCStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCService_SetMPCStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMPCStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCServiceServer).SetMPCStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPCService_SetMPCStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCServiceServer).SetMPCStatus(ctx, req.(*SetMPCStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MPCService_IsConnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsConnectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MPCServiceServer).IsConnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MPCService_IsConnected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MPCServiceServer).IsConnected(ctx, req.(*IsConnectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MPCService_ServiceDesc is the grpc.ServiceDesc for MPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mpcService.MPCService",
	HandlerType: (*MPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunMPC",
			Handler:    _MPCService_RunMPC_Handler,
		},
		{
			MethodName: "InitMPCStatus",
			Handler:    _MPCService_InitMPCStatus_Handler,
		},
		{
			MethodName: "GetMPCStatus",
			Handler:    _MPCService_GetMPCStatus_Handler,
		},
		{
			MethodName: "SetMPCStatus",
			Handler:    _MPCService_SetMPCStatus_Handler,
		},
		{
			MethodName: "IsConnected",
			Handler:    _MPCService_IsConnected_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "soda-mpc/rpc/mpcService.proto",
}
